!_TAG_FILE_FORMAT	2	/extended format/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_ENCODING	utf-8	//
!_TAG_PROGRAM_NAME	nix-doc tags	//
!_TAG_PROGRAM_URL	https://github.com/lf-/nix-doc	//
CATTESTVAR	flake.nix	/^            CATTESTVAR = "It worked!";$/;"	m
FilterAttrsOfAttrsFlatMapInner	builder/utils.nix	/^  FilterAttrsOfAttrsFlatMapInner = pkgs: categories: twoArgFunc: SetOfCategoryAttrs: let$/;"	f
FilterAttrsOfListsFlatMapInner	builder/utils.nix	/^  FilterAttrsOfListsFlatMapInner = pkgs: categories: oneArgFunc: SetOfCategoryLists: let$/;"	f
buildVimPlugin	builder/standardPluginOverlay.nix	/^  inherit (super.vimUtils) buildVimPlugin;$/;"	m
builder	builder/default.nix	/^      builder = builtins.toFile "builder.sh" ''$/;"	m
builder	builder/default.nix	/^      builder = let$/;"	m
categories	flake.nix	/^          categories = {$/;"	m
categories	flake.nix	/^          categories = {$/;"	m
categoryDefinitions	flake.nix	/^      inherit categoryDefinitions;$/;"	m
colorscheme	flake.nix	/^            colorscheme = "onedark";$/;"	m
colorscheme	flake.nix	/^            colorscheme = "onedark";$/;"	m
configDirName	flake.nix	/^          configDirName = "nixCats-nvim";$/;"	m
configDirName	flake.nix	/^          configDirName = "nixCats-nvim";$/;"	m
configDirName	builder/default.nix	/^    configDirName = "nvim";$/;"	m
configure	builder/default.nix	/^  configure = {$/;"	m
custom	flake.nix	/^            custom = true;$/;"	m
custom	flake.nix	/^            custom = true;$/;"	m
custom	flake.nix	/^          custom = with pkgs.customBuilds; [ ];$/;"	m
customBuilders	flake.nix	/^      customBuilders = {$/;"	m
customBuilds	overlays/default.nix	/^    customBuilds = import .\/customBuildsOverlay.nix;$/;"	m
customPackager	flake.nix	/^      customPackager = baseBuilder self pkgs categoryDefinitions;$/;"	m
customRC	builder/wrapNeovim.nix	/^        customRC = configure.customRC or "";$/;"	m
customRC	builder/default.nix	/^    inherit customRC;$/;"	m
debug	flake.nix	/^            debug = false;$/;"	m
debug	flake.nix	/^          debug = with pkgs.vimPlugins; [$/;"	m
debug	flake.nix	/^            debug = false;$/;"	m
default	flake.nix	/^          { default = (self: super: { \${defaultName} = finalBuilder defaultName; }); }$/;"	m
default	flake.nix	/^          { default = finalBuilder defaultName; }$/;"	m
description	flake.nix	/^  description = "A Lua-natic's neovim flake, with extra cats! nixCats!";$/;"	m
devShell	flake.nix	/^      devShell = pkgs.mkShell {$/;"	m
doInstallCheck	overlays/customBuildsOverlay.nix	/^        doInstallCheck = true;$/;"	m
environmentVariables	builder/default.nix	/^      environmentVariables = {};$/;"	m
environmentVariables	flake.nix	/^        environmentVariables = {$/;"	m
environmentVariables	builder/default.nix	/^  environmentVariables extraWrapperArgs $/;"	m
extraLuaPackages	builder/default.nix	/^  extraLuaPackages = combineCatsOfFuncs extraLuaPackages;$/;"	m
extraLuaPackages	flake.nix	/^        extraLuaPackages = {$/;"	m
extraLuaPackages	builder/default.nix	/^      extraLuaPackages = {};$/;"	m
extraLuaPackages	builder/wrapNeovim.nix	/^        inherit extraLuaPackages;$/;"	m
extraLuaPackages	builder/default.nix	/^  extraLuaPackages optionalLuaAdditions;$/;"	m
extraMakeWrapperArgs	builder/default.nix	/^  inherit extraMakeWrapperArgs;$/;"	m
extraName	builder/default.nix	/^    extraName = "";$/;"	m
extraName	builder/default.nix	/^  inherit (settings) vimAlias viAlias withRuby extraName withNodeJs;$/;"	m
extraName	builder/wrapNeovim.nix	/^        inherit extraName;$/;"	m
extraPython3Packages	flake.nix	/^        extraPython3Packages = {$/;"	m
extraPython3Packages	builder/default.nix	/^  extraPython3Packages = combineCatsOfFuncs extraPython3Packages;$/;"	m
extraPython3Packages	builder/default.nix	/^      extraPython3Packages = {};$/;"	m
extraPython3Packages	builder/wrapNeovim.nix	/^        inherit withPython3 extraPython3Packages;$/;"	m
extraPython3Packages	builder/default.nix	/^  extraPythonPackages extraPython3Packages$/;"	m
extraPythonPackages	builder/default.nix	/^      extraPythonPackages = {};$/;"	m
extraPythonPackages	flake.nix	/^        extraPythonPackages = {$/;"	m
extraPythonPackages	builder/default.nix	/^  extraPythonPackages = combineCatsOfFuncs extraPythonPackages;$/;"	m
extraPythonPackages	builder/default.nix	/^  extraPythonPackages extraPython3Packages$/;"	m
extraWrapperArgs	flake.nix	/^        extraWrapperArgs = {$/;"	m
extraWrapperArgs	builder/default.nix	/^      extraWrapperArgs = {};$/;"	m
extraWrapperArgs	builder/default.nix	/^  environmentVariables extraWrapperArgs $/;"	m
filterAndFlattenAttrsOfLists	builder/utils.nix	/^  filterAndFlattenAttrsOfLists = pkgs: categories: SetOfCategoryLists: let$/;"	f
flake	flake.nix	/^      flake = false;$/;"	m
flake	flake.nix	/^      flake = false;$/;"	m
fresh	flake.nix	/^        fresh = baseBuilder;$/;"	m
general	flake.nix	/^          general = with pkgs.vimPlugins; [$/;"	m
general	flake.nix	/^          general = with pkgs; [$/;"	m
general	flake.nix	/^            general = true;$/;"	m
general	flake.nix	/^          general = with pkgs.vimPlugins; [ ];$/;"	m
general	flake.nix	/^            general = true;$/;"	m
generalBuildInputs	flake.nix	/^            generalBuildInputs = true;$/;"	m
generalBuildInputs	flake.nix	/^            generalBuildInputs = true;$/;"	m
generalBuildInputs	flake.nix	/^          generalBuildInputs = with pkgs; [$/;"	m
gitPlugins	flake.nix	/^          gitPlugins = with pkgs.neovimPlugins; [ ];$/;"	m
gitPlugins	flake.nix	/^          gitPlugins = with pkgs.neovimPlugins; [$/;"	m
gitPlugins	flake.nix	/^            gitPlugins = true;$/;"	m
gitPlugins	flake.nix	/^            gitPlugins = true;$/;"	m
hash	overlays/customBuildsOverlay.nix	/^            hash = "sha256-kzc9jm6d9PJ07yiWfIOwqxOTAAydTpaLXVK6sEWM8gg=";$/;"	m
inputs	flake.nix	/^  inputs = {$/;"	m
inputsFrom	flake.nix	/^        inputsFrom = [ ];$/;"	m
installCheckPhase	overlays/customBuildsOverlay.nix	/^        installCheckPhase = ''$/;"	m
keepLua	flake.nix	/^        keepLua = baseBuilder self;$/;"	m
legacyWrapper	builder/wrapNeovim.nix	/^  legacyWrapper = pkgs: neovim: {$/;"	f
lspDebugMode	flake.nix	/^            lspDebugMode = false;$/;"	m
lspDebugMode	flake.nix	/^            lspDebugMode = false;$/;"	m
lspsAndRuntimeDeps	builder/default.nix	/^      lspsAndRuntimeDeps = {};$/;"	m
lspsAndRuntimeDeps	flake.nix	/^        lspsAndRuntimeDeps = {$/;"	m
lspsAndRuntimeDeps	builder/default.nix	/^  lspsAndRuntimeDeps propagatedBuildInputs$/;"	m
luaListPrinter	builder/utils.nix	/^  luaListPrinter = theList: let$/;"	f
luaTablePrinter	builder/utils.nix	/^  luaTablePrinter = attrSet: let$/;"	f
markdown	flake.nix	/^          markdown = with pkgs.customBuilds; [$/;"	m
markdown	flake.nix	/^            markdown = true;$/;"	m
markdown	flake.nix	/^            markdown = true;$/;"	m
markdown-preview-nvim	overlays/customBuildsOverlay.nix	/^      markdown-preview-nvim =  let$/;"	m
mergeCatDefs	flake.nix	/^        mergeCatDefs = pkgs: oldCats: newCats: $/;"	f
mkOverlays	flake.nix	/^        mkOverlays = finalBuilder: packageDefinitions: defaultName:$/;"	f
mkPackages	flake.nix	/^        mkPackages = finalBuilder: packageDefinitions: defaultName:$/;"	f
myVimPackage	builder/default.nix	/^    packages.myVimPackage = {$/;"	m
name	builder/standardPluginOverlay.nix	/^      name = plugName plugin;$/;"	m
name	builder/default.nix	/^      name = builtins.baseNameOf path;$/;"	m
name	builder/default.nix	/^      name = "nixCats";$/;"	m
name	flake.nix	/^        name = "nixCats";$/;"	m
nativeBuildInputs	overlays/customBuildsOverlay.nix	/^        nativeBuildInputs = [ super.nodejs ];$/;"	m
neonixdev	flake.nix	/^          neonixdev = with pkgs.vimPlugins; [$/;"	m
neonixdev	flake.nix	/^            neonixdev = true;$/;"	m
neonixdev	flake.nix	/^          neonixdev = with pkgs; [$/;"	m
neonixdev	flake.nix	/^            neonixdev = true;$/;"	m
neovimPlugins	builder/standardPluginOverlay.nix	/^  neovimPlugins = builtins.listToAttrs (map$/;"	m
nixCats	flake.nix	/^        nixCats = {$/;"	m
nixCats	flake.nix	/^        nixCats = {$/;"	m
offlineCache	overlays/customBuildsOverlay.nix	/^          offlineCache = super.fetchYarnDeps {$/;"	m
opt	builder/default.nix	/^      inherit start opt;$/;"	m
optional	builder/wrapNeovim.nix	/^        start ++ (map (p: { plugin = p; optional = true; }) opt);$/;"	m
optionalLuaAdditions	builder/default.nix	/^      optionalLuaAdditions = "";$/;"	m
optionalLuaAdditions	builder/default.nix	/^  extraLuaPackages optionalLuaAdditions;$/;"	m
optionalPlugins	flake.nix	/^        optionalPlugins = {$/;"	m
optionalPlugins	builder/default.nix	/^      optionalPlugins = {};$/;"	m
optionalPlugins	builder/default.nix	/^  startupPlugins optionalPlugins $/;"	m
otherOverlays	flake.nix	/^      inherit otherOverlays;$/;"	m
outputs	flake.nix	/^  outputs = { self, nixpkgs, flake-utils, ... }@inputs:$/;"	f
overlays	flake.nix	/^        overlays = otherOverlays ++ $/;"	m
overlays	flake.nix	/^      overlays = utils.mkOverlays nixCatsBuilder packageDefinitions "nixCats";$/;"	m
packageJSON	overlays/customBuildsOverlay.nix	/^          packageJSON = "\${super.vimPlugins.markdown-preview-nvim.src}\/package.json";$/;"	m
packages	flake.nix	/^        packages = [ (nixCatsBuilder "nixCats") ];$/;"	m
packages	flake.nix	/^      packages = utils.mkPackages nixCatsBuilder packageDefinitions "nixCats";$/;"	m
plugin	builder/wrapNeovim.nix	/^        start ++ (map (p: { plugin = p; optional = true; }) opt);$/;"	m
plugins	builder/wrapNeovim.nix	/^        inherit plugins;$/;"	m
pname	builder/standardPluginOverlay.nix	/^    pname = plugName name;$/;"	m
pname	overlays/customBuildsOverlay.nix	/^          inherit (super.vimPlugins.markdown-preview-nvim) pname version;$/;"	m
postInstall	overlays/customBuildsOverlay.nix	/^        postInstall = ''$/;"	m
propagatedBuildInputs	builder/default.nix	/^      propagatedBuildInputs = buildInputs;$/;"	m
propagatedBuildInputs	builder/default.nix	/^      propagatedBuildInputs = {};$/;"	m
propagatedBuildInputs	flake.nix	/^        propagatedBuildInputs = {$/;"	m
propagatedBuildInputs	builder/default.nix	/^  lspsAndRuntimeDeps propagatedBuildInputs$/;"	m
regularCats	flake.nix	/^        regularCats = { $/;"	m
settings	flake.nix	/^          settings = settings.nixCats; $/;"	m
settings	flake.nix	/^          settings = settings.unwrappedLua;$/;"	m
shellHook	flake.nix	/^        shellHook = ''$/;"	m
src	builder/standardPluginOverlay.nix	/^    src = builtins.getAttr name inputs;$/;"	m
standardPluginOverlay	flake.nix	/^        inherit standardPluginOverlay;$/;"	m
start	builder/default.nix	/^      inherit start opt;$/;"	m
startupPlugins	builder/default.nix	/^      startupPlugins = {};$/;"	m
startupPlugins	flake.nix	/^        startupPlugins = {$/;"	m
startupPlugins	builder/default.nix	/^  startupPlugins optionalPlugins $/;"	m
system	flake.nix	/^        inherit system;$/;"	m
test	flake.nix	/^          test = [ (_:[]) ];$/;"	m
test	flake.nix	/^          test = [ (_:[]) ];$/;"	m
test	flake.nix	/^          test = {$/;"	m
test	flake.nix	/^            test = true;$/;"	m
test	flake.nix	/^          test = [$/;"	m
test	flake.nix	/^          test = [ (_:[]) ];$/;"	m
test	flake.nix	/^            test = true;$/;"	m
theWorstCat	flake.nix	/^            theWorstCat = {$/;"	m
theWorstCat	flake.nix	/^            theWorstCat = {$/;"	m
thing1	flake.nix	/^              thing1 = [ "MEOW" "HISSS" ];$/;"	m
thing1	flake.nix	/^              thing1 = [ "MEOW" "HISSS" ];$/;"	m
thing2	flake.nix	/^              thing2 = [$/;"	m
thing2	flake.nix	/^              thing2 = [$/;"	m
thing3	flake.nix	/^                  thing3 = [ "give" "treat" ];$/;"	m
thing3	flake.nix	/^                  thing3 = [ "give" "treat" ];$/;"	m
thing4	flake.nix	/^              thing4 = "couch is for scratching";$/;"	m
thing4	flake.nix	/^              thing4 = "couch is for scratching";$/;"	m
unwrappedLua	flake.nix	/^        unwrappedLua = {$/;"	m
url	flake.nix	/^    flake-utils.url = "github:numtide\/flake-utils";$/;"	m
url	flake.nix	/^      url = "github:j-hui\/fidget.nvim\/legacy";$/;"	m
url	flake.nix	/^      url = "github:m-demare\/hlargs.nvim";$/;"	m
url	flake.nix	/^    nixd.url = "github:nix-community\/nixd";$/;"	m
url	flake.nix	/^    nixpkgs.url = "github:nixos\/nixpkgs\/nixpkgs-unstable";$/;"	m
utils	flake.nix	/^      utils = {$/;"	m
value	builder/standardPluginOverlay.nix	/^      value = buildPlug plugin;$/;"	m
version	builder/standardPluginOverlay.nix	/^    version = "master";$/;"	m
version	overlays/customBuildsOverlay.nix	/^          inherit (super.vimPlugins.markdown-preview-nvim) pname version;$/;"	m
viAlias	flake.nix	/^          viAlias = false;$/;"	m
viAlias	builder/default.nix	/^    viAlias = false;$/;"	m
viAlias	flake.nix	/^          viAlias = false;$/;"	m
viAlias	builder/default.nix	/^  inherit (settings) vimAlias viAlias withRuby extraName withNodeJs;$/;"	m
viAlias	builder/wrapNeovim.nix	/^        inherit withNodeJs withRuby viAlias vimAlias;$/;"	m
vimAlias	builder/default.nix	/^    vimAlias = false;$/;"	m
vimAlias	flake.nix	/^          vimAlias = true;$/;"	m
vimAlias	flake.nix	/^          vimAlias = true;$/;"	m
vimAlias	builder/default.nix	/^  inherit (settings) vimAlias viAlias withRuby extraName withNodeJs;$/;"	m
vimAlias	builder/wrapNeovim.nix	/^        inherit withNodeJs withRuby viAlias vimAlias;$/;"	m
withNodeJs	builder/default.nix	/^    withNodeJs = false;$/;"	m
withNodeJs	builder/wrapNeovim.nix	/^        inherit withNodeJs withRuby viAlias vimAlias;$/;"	m
withNodeJs	builder/default.nix	/^  inherit (settings) vimAlias viAlias withRuby extraName withNodeJs;$/;"	m
withPython3	builder/default.nix	/^    withPython3 = true;$/;"	m
withPython3	builder/default.nix	/^  withPython3 = settings.withPython3;$/;"	m
withPython3	builder/wrapNeovim.nix	/^        inherit withPython3 extraPython3Packages;$/;"	m
withRuby	builder/default.nix	/^    withRuby = true;$/;"	m
withRuby	builder/default.nix	/^  inherit (settings) vimAlias viAlias withRuby extraName withNodeJs;$/;"	m
withRuby	builder/wrapNeovim.nix	/^        inherit withNodeJs withRuby viAlias vimAlias;$/;"	m
wrapNeovim	builder/wrapNeovim.nix	/^  wrapNeovim = pkgs: neovim-unwrapped: pkgs.lib.makeOverridable (legacyWrapper pkgs neovim-unwrapped);$/;"	f
wrapRc	builder/wrapNeovim.nix	/^      wrapRc = true;$/;"	m
wrapRc	builder/default.nix	/^    wrapRc = true;$/;"	m
wrapRc	flake.nix	/^          wrapRc = true;$/;"	m
wrapRc	flake.nix	/^          wrapRc = false;$/;"	m
wrapRc	builder/default.nix	/^        categoriesPlus = categories \/\/ { inherit (settings) wrapRc; };$/;"	m
wrapperArgs	builder/wrapNeovim.nix	/^      wrapperArgs = pkgs.lib.escapeShellArgs res.wrapperArgs + " " + extraMakeWrapperArgs;$/;"	m
yarnLock	overlays/customBuildsOverlay.nix	/^          yarnLock = "\${super.vimPlugins.markdown-preview-nvim.src}\/yarn.lock";$/;"	m
yarnLock	overlays/customBuildsOverlay.nix	/^            inherit yarnLock;$/;"	m
